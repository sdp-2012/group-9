package sdp.server.strategy;

import sdp.server.PcServer;
import sdp.server.PropertyProvider;
import sdp.server.RobotState.Team;
import sdp.server.gui.ControlPanel;
import sdp.server.math.MathUtils;
import sdp.server.math.Vector2;

// import javax.swing.JButton;
// import static com.googlecode.javacv.cpp.opencv_core.*;

public class FriendlyStrategy extends Strategy {
	public Vector2[]     obstaclePositions = { null, null };
	public double[]      obstacleRadii     = { 0.0, 0.0 };
	public boolean       avoidRobot        = false;
	private int          kickOff           = 0;
	private double       ourSide           = -1.0;
	private Vector2      oldBallPos;
	private ControlPanel panel;
	private Settings     settings = new Settings();
	
	public static class Settings extends PropertyProvider {
		public double kickOffDist1 = 0.15;
		public double kickOffDist2 = 0.15;
		public double kickOffSpeed = 1.0;
		public double kickOffAngle = 5.0;
		public double normalDist1  = 0.15;
		public double normalSpeed  = 1.0;
		
		Settings() {
			populateProperties();
		}
		
		private void populateProperties() {
			new ReflectProperty( "KickOff.Dist1", "kickOffDist1", 0.0,  1.0, 0.001 );
			new ReflectProperty( "KickOff.Dist2", "kickOffDist2", 0.0,  1.0, 0.001 );
			new ReflectProperty( "KickOff.Angle", "kickOffAngle", 2.0, 64.0, 0.5 );
			new ReflectProperty( "KickOff.Speed", "kickOffSpeed", 0.0,  1.0, 0.001 );
			new ReflectProperty( "Normal.Dist1",   "normalDist1", 0.0,  1.0, 0.001 );
			new ReflectProperty( "Normal.Speed",   "normalDist1", 0.0,  1.0, 0.001 );
		}
	}
	
	
	public FriendlyStrategy( PcServer server, double ourSide ) {
		super( server );
		this.ourSide = ourSide;
		
	}
	
	@Override
	public void enable() {
		if( !enabled ) {
			super.enable();
			panel   = new ControlPanel();
			panel.addPropertyProviderSpinners( settings );
		}
	}
	
	@Override
	public void disable() {
		if( enabled ) {
			super.disable();
			panel.dispose();
		}
	}
	
	
	public void kickBall( Vector2 kickTo, double speed, double dist, boolean stopToAim ) {
		double kickTowards = -ourSide;
		Vector2 ballPos = world.getBallState().getPosition();
		double  ballRad = world.getBallState().getRadius();
		Vector2 robPos  = ctrl.getRobotGoalPoint();
		Vector2 pitch   = world.getPitchTopRight();
		
		if( kickTo == null )
			kickTo = new Vector2( kickTowards * pitch.getX(), 0 );
		
		Vector2 kickLine  = ballPos.minus( kickTo ).computeUnit();
		Vector2 toBall    = ballPos.minus( robPos ).computeUnit();
		double  kickFromDistance = dist + ctrl.getGoalPointOffset();
		Vector2 kickFrom         = ballPos.plus( kickLine.times( ballRad  + kickFromDistance ) ).plus(toBall.times(ctrl.getGoalPointOffset() - ctrl.getPivotOffset()));
		double  kickAngle        = kickLine.times( -1.0 ).computeAngle();
		
		double  distToBall       = ballPos.minus( robPos ).computeNorm();
		if( distToBall >= 0.015 + ctrl.getGoalPointOffset() || MathUtils.angleDiff( toBall.computeAngle(), kickAngle ) >= Math.PI/16.0  ) {
			if( stopToAim ) {
				enqueueGoal(
					new StrategyGoal( StrategyGoal.Type.GOTO, kickFrom, kickAngle, speed ),
					obstaclePositions,
					obstacleRadii
				);
			} else {
				enqueueGoal(
					new StrategyGoal( StrategyGoal.Type.GOTO, kickFrom, speed, false ),
					obstaclePositions,
					obstacleRadii
				);
			}
		}
		enqueueGoal( new StrategyGoal( StrategyGoal.Type.GOTO, ballPos.minus(kickLine.times(0.01)), speed, false ) );
		enqueueGoal( new StrategyGoal( StrategyGoal.Type.KICK ) );
	}
	
	public void update() {
		if( this.enabled ) {
			Vector2 ballPos = world.getBallState().getPosition();
			double  ballChange;
			if( oldBallPos != null )
				ballChange = oldBallPos.minus(ballPos).computeNorm();
			else
				ballChange = 0.0;
			
			obstaclePositions[ 0 ] = world.getBallState().getPosition();
			obstacleRadii    [ 0 ] = world.getBallState().getRadius() + 0.05;
			
			if( ctrl.getRobotState().getTeam() == Team.YELLOW )
				obstaclePositions[ 1 ] = world.getRobotState( Team.BLUE ).getPosition();
			else
				obstaclePositions[ 1 ] = world.getRobotState( Team.YELLOW ).getPosition();
			
			obstacleRadii[ 1 ] = 0.1;
			
			
			if( kickOff == 0 ) {
				Vector2 pitch = world.getPitchTopRight();
				clearQueue();
				
				Vector2 kickFrom    = ballPos.plus( new Vector2( ourSide * settings.kickOffDist1, 0.0 ) );
				Vector2 kickTowards = kickFrom.plus( Vector2.fromAngle( Math.atan2( 0, -ourSide ) + 2.0 * Math.PI / settings.kickOffAngle, settings.kickOffDist2 ) );
				
				enqueueGoal( new StrategyGoal( StrategyGoal.Type.GOTO, kickFrom,    settings.kickOffSpeed, false ) );
				enqueueGoal( new StrategyGoal( StrategyGoal.Type.GOTO, kickTowards, settings.kickOffSpeed, false ) );
				enqueueGoal( new StrategyGoal( StrategyGoal.Type.KICK ) );
				
				runCurrentGoal();
				kickOff = 1;
				oldBallPos = ballPos;
			} else if( kickOff == 1 ) {
				if( ballChange > 0.06 ){
					System.out.println(ballChange);
					kickOff = 2;
					System.out.println("FriendlyStrategy: update(): Normal mode started.");
				}
			} else if( getGoalCount() > 3 || getGoalCount() == 0 || ballChange > 0.05 ) {
				kickOff = 3;
				clearQueue();
				kickBall( null, settings.normalSpeed, settings.normalDist1, false );
				runCurrentGoal();
				oldBallPos = ballPos;
			}
			
			
			super.update();
		}
	}
}
