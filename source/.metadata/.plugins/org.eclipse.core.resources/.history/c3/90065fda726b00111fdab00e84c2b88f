package sdp.server.vision;


import sdp.server.math.MathUtils;
import sdp.server.math.Vector2;

import static com.googlecode.javacv.cpp.opencv_core.*;
import static com.googlecode.javacv.cpp.opencv_imgproc.*;

public class BlackCircleModel extends EntityModel {
	private Vector2   robotCentroid;
	private IplImage  robotChannel;

	private double    samplePointDist =  0.6;
	private double    area            = 50.0;
	private double    areaTolerance   =  0.6;
	private double    circTolerance   =  0.7;
	private double    centroidDist    = 35.0;
	private double    distTolerance   =  0.5;
	
	public BlackCircleModel( CvMemStorage storage, IplImage channel, IplImage robotChannel, IplImage temp1 ) {
		super( storage, channel, temp1 );
		this.robotChannel = channel;
	}
	
	public void setRobotCentroid( Vector2 newRobotCentroid ) {
		robotCentroid = newRobotCentroid;
	}
	
	@Override
	public boolean detect() {
		if( super.detect() ) {
			IplImage debugImage = getDebugImage();
			if( debugImage != null ) {
				cvCircle( debugImage, getCentroid().getCvPoint(), 5, cvScalar(255, 0, 255, 0), 1, 8, 0);
			}
			return true;
		}
		return false;
	}
	
	@Override
	protected double contourScore( CvSeq c, CvMoments moments ) {
		CvRect  bound    = cvBoundingRect( c, 1 );
		double  radius   = (double)(bound.width() + bound.height()) / 4;
		Vector2 centroid = computeCentroid( moments );
		double  area     = computeArea( moments );
		boolean smplTest = true;
		Vector2 offset   = getRoiOffset();
		
		if( robotCentroid != null ) {
			Vector2 samplePt = robotCentroid.minus(centroid).times( samplePointDist ).plus( robotCentroid );
			if( MathUtils.isInBounds( samplePt, new Vector2( robotChannel.width(), robotChannel.height() ), 1.0 ) ) {
				CvScalar s = cvGet2D( robotChannel, samplePt.getIntY(), samplePt.getIntX() );
				smplTest   = ((int)s.getVal(0)) == 255;
			}
		}
		
		double  circProp = Math.abs( radius / Math.sqrt( area / Math.PI ) - 1.0 );
		double  areaProp = Math.abs( area / this.area - 1.0 );
		double  distProp = Math.abs( robotCentroid.minus(centroid).computeNorm() / centroidDist - 1.0 );
		
		boolean circTest = circProp < circTolerance;
		boolean distTest = distProp < distTolerance;
		boolean areaTest = areaProp < areaTolerance;
		
		System.out.println(smplTest + " " + circTest + " " + distTest + " " + areaTest);
					
		if( smplTest && circTest && areaTest && distTest )
			return - circProp - areaProp - distProp;
		else
			return Double.NaN;
	}
	
	@Override
	protected void populateProperties() {
		new ReflectProperty( "SamplePtDist",       "samplePointDist", 0.0,   2.0, 0.1 );
		new ReflectProperty( "Area.Value",         "area",            0.0, 500.0, 1.0 );
		new ReflectProperty( "Area.Tolerance",     "areaTolerance",   0.0,   2.0, 0.1 );
		new ReflectProperty( "Circle.Tolerance",   "circTolerance",   0.0,   2.0, 0.1 );
		new ReflectProperty( "Distance.Value",     "centroidDist",    0.0, 100.0, 0.5 );
		new ReflectProperty( "Distance.Tolerance", "distTolerance",   0.0,   2.0, 0.1 );
	}
}
