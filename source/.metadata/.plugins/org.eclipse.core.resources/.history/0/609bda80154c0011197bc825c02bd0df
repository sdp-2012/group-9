package sdp;

import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.reflect.Array;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;

import lejos.pc.comm.NXTComm;
import lejos.pc.comm.NXTCommException;
import lejos.pc.comm.NXTCommFactory;
import lejos.pc.comm.NXTInfo;

public class Communication {
	
	private static final byte    OP_SPEEDS    = 0x0;
	private static final byte    OP_KICK      = 0x1;
	private static final byte    OP_SHUTDOWN  = 0x2;
	
	private boolean useUSB = false;
	private boolean connected = false;
	private boolean dummyMode = true;
	
	private DataOutputStream os;
	private InputStream is;
	private NXTComm nxtComm;
	
	public boolean getDummyMode() {
		return dummyMode;
	}
	
	public void setDummyMode( boolean newDummyMode ) {
		if( !dummyMode ) {
			if( connected )
				disconnect();
		} else {
			dummyMode = newDummyMode;
		}
	}
	
	public void connect() {
		if (this.dummyMode) {
			return;
		}
		
		NXTInfo[] info        = null;
		boolean   deviceFound = false;
		
		try {
			if (this.useUSB) {
				System.out.println("Communication: Using USB.");
				nxtComm = NXTCommFactory.createNXTComm(NXTCommFactory.USB);
				info = nxtComm.search(null, NXTCommFactory.USB);
			} else {
				System.out.println("Communication: Using Bluetooth.");
				nxtComm = NXTCommFactory.createNXTComm(NXTCommFactory.BLUETOOTH);
				info = new NXTInfo [1];
				info[0] = new NXTInfo(NXTCommFactory.BLUETOOTH, "Lm", "00:16:53:07:D6:2B");
			}
		
			if( info.length > 0 ) {
				nxtComm.open( info[0] );
				deviceFound = true;
			}
		} catch (NXTCommException e) {
			System.err.println("Communication: Cannot establish connection: " + e.getMessage());
		}
		
		
		if( deviceFound ) {
			os = new DataOutputStream( nxtComm.getOutputStream() );
			is = nxtComm.getInputStream();
			System.out.println("Communication: Connection established.");
			this.connected = true;
		} else {
			System.err.println("Communication: No device found.");
		}

	}
	
	public void disconnect() {
		if( this.connected ) {
			try {
				nxtComm.close(); nxtComm = null;
				is.close(); is = null;
				os.close(); os = null;
			} catch (IOException e) {
				
			}
			
			this.connected = false;
			System.out.println("Communication: Disconnected.");
		}
	}
	
	public boolean isConnected() {
		if (this.dummyMode) {
			return true;
		}
		return this.connected;
	}
	
	public void update( double[] newWheelSpeeds ) {
		if( dummyMode )
			return;
		
		if( isConnected() ) {
			try {
				os.write( OP_SPEEDS );
				for( int i = 0 ; i < 2 ; ++ i) {
					newWheelSpeeds[ i ] *= 180.0 / Math.PI;
					os.writeFloat( (float) newWheelSpeeds[ i ] );
				}
				os.flush();
			} catch( IOException e ) {
				System.err.println("Communication: Could not send wheel info.");
				disconnect();
			}
		} else {
			connect();
		}
	}
	
	public void kick() {
		if( dummyMode )
			return;
		
		if( isConnected() ) {
			try {
				System.out.println("Communication: Kick!");
				os.writeByte( OP_KICK );
				os.flush();
			} catch( IOException e ) {
				System.err.println("Communication: Could not send kick message.");
				disconnect();
			}
		}
	}
	
	public void shutdownRobot() {
		if( dummyMode )
			return;
		
		if( isConnected() ) {
			try {
				os.writeByte( OP_SHUTDOWN );
				os.flush();
			} catch( IOException e ) {
				System.err.println("Communication: Could not send shutdown message.");
				disconnect();
			}
		}
	}
	
	public double[] getEncoderValues() {
		return null;
	}
	
	
}
